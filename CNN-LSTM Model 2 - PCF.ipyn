{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BOSS - CNN-LSTM Model 2 - PCF.ipyn","version":"0.3.2","provenance":[],"collapsed_sections":["9wT0eWLNqsii","FqSsDNBpqsip"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"6GEZ0gtRXWoZ","colab_type":"text"},"cell_type":"markdown","source":["ref: https://machinelearningmastery.com/how-to-develop-rnn-models-for-human-activity-recognition-time-series-classification/"]},{"metadata":{"id":"6Je6OUkqqsif","colab_type":"code","colab":{}},"cell_type":"code","source":["import os\n","from scipy.io import loadmat\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","import pickle\n","import re\n","from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9wT0eWLNqsii","colab_type":"text"},"cell_type":"markdown","source":["## Read Data"]},{"metadata":{"id":"VKUn9bgNj7Gl","colab_type":"text"},"cell_type":"markdown","source":["### Mount google drive"]},{"metadata":{"id":"buThuWRhjOvM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Mount Google drive\n","from google.colab import drive\n","\n","# This will prompt for authorization.\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PdkRlyuMjqoh","colab_type":"code","colab":{}},"cell_type":"code","source":["# Here you must try by yourself where the path to the dataset folder is !!\n","# e.g. !ls \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","!ls \"gdrive\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"YSu2jDSckK5B","colab_type":"code","colab":{}},"cell_type":"code","source":["# Then assign the path here.\n","# This is the path for my GG drive, change it according to your path\n","# dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","\n","# Your folder path here\n","dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"FqSsDNBpqsip","colab_type":"text"},"cell_type":"markdown","source":["### Read data from csv"]},{"metadata":{"id":"PV64-5xDqsip","colab_type":"code","colab":{}},"cell_type":"code","source":["try:\n","  dataset_path\n","except:\n","  dataset_path = os.path.join(os.getcwd(), 'datasets')\n","\n","df_train_pcf = pd.read_csv(os.path.join(dataset_path, 'df_train_pcf.csv'))\n","df_test_pcf = pd.read_csv(os.path.join(dataset_path, 'df_test_pcf.csv'))\n","df_train_raw = pd.read_csv(os.path.join(dataset_path, 'df_train_raw.csv'))\n","df_test_raw = pd.read_csv(os.path.join(dataset_path, 'df_test_raw.csv'))\n","\n","label_dict = {2: 'left', 3: 'right', 7: 'word'}\n","df_train_pcf.replace({'label' : label_dict}, inplace=True)\n","df_train_raw.replace({'label' : label_dict}, inplace=True)\n","\n","pcf_setup = pickle.load(open(os.path.join(dataset_path, 'pcf_setup.obj'), \"rb\"))\n","raw_setup = pickle.load(open(os.path.join(dataset_path, 'raw_setup.obj'), \"rb\"))\n","\n","pcf_channels = pcf_setup['channels']\n","raw_channels = raw_setup['channels']"],"execution_count":0,"outputs":[]},{"metadata":{"id":"rJcl1hcL4gkM","colab_type":"text"},"cell_type":"markdown","source":["## CNN-LSTM"]},{"metadata":{"id":"ETpqnjuf6dDu","colab_type":"code","outputId":"c5ec5a66-eccf-4248-e0a1-fd671e92bfa7","executionInfo":{"status":"ok","timestamp":1554415301532,"user_tz":-60,"elapsed":1534,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import Flatten\n","from keras.layers import Dropout\n","from keras.layers import LSTM\n","from keras.layers import TimeDistributed\n","from keras.layers.convolutional import Conv1D\n","from keras.layers.convolutional import MaxPooling1D\n","from keras.utils import to_categorical"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"9tjKa7cO4qoM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Load dataset\n","def load_dataset(df, sessions=[1,2,3], subjects=[1,2,3]):\n","    data = df.copy()\n","    sampling_rate = 8\n","\n","    interest_index = data['session'].isin(sessions) & data['subject'].isin(subjects)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    X = data[interest_index][data_columns].values\n","    y = data[interest_index]['label'].values\n","  \n","    n_features = X.shape[1]\n","  \n","    X = X.reshape(X.shape[0]//sampling_rate, sampling_rate, n_features)\n","    y = to_categorical(y[::sampling_rate])\n","\n","    trainX, testX, trainy, testy = train_test_split(X, y, test_size=0.3, random_state=1)\n","    return trainX, trainy, testX, testy\n","\n","def load_dataset_by_subjects(df, subjects_train=[1,2], subjects_test=[3]):\n","    data = df.copy()\n","    sampling_rate = 8\n","\n","    train_index = data['subject'].isin(subjects_train)\n","    test_index = data['subject'].isin(subjects_test)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    trainX = data[train_index][data_columns].values\n","    testX = data[test_index][data_columns].values\n","    trainy = data[train_index]['label'].values\n","    testy = data[test_index]['label'].values\n","  \n","    n_features = trainX.shape[1]\n","\n","    trainX = trainX.reshape(trainX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    testX = testX.reshape(testX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    trainy = to_categorical(trainy[::sampling_rate])\n","    testy = to_categorical(testy[::sampling_rate])\n","\n","    return trainX, trainy, testX, testy\n","\n","def load_dataset_customized(df, train_tuple_list, test_tuple_list):\n","    data = df.copy()\n","    sampling_rate = 8\n","\n","    train_index = pd.Series([False] * data.shape[0])\n","    test_index = pd.Series([False] * data.shape[0])\n","    \n","    for subject, session in train_tuple_list:\n","        train_index |= (data['subject'] == subject) & (data['session'] == session)\n","    \n","    for subject, session in test_tuple_list:\n","        test_index |= (data['subject'] == subject) & (data['session'] == session)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    trainX = data[train_index][data_columns].values\n","    testX = data[test_index][data_columns].values\n","    trainy = data[train_index]['label'].values\n","    testy = data[test_index]['label'].values\n","  \n","    n_features = trainX.shape[1]\n","\n","    trainX = trainX.reshape(trainX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    testX = testX.reshape(testX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    trainy = to_categorical(trainy[::sampling_rate])\n","    testy = to_categorical(testy[::sampling_rate])\n","\n","    return trainX, trainy, testX, testy\n","\n","# fit and evaluate a model\n","def evaluate_model(trainX, trainy, testX, testy):\n","    # define model\n","    verbose, epochs, batch_size = 0, 25, 16\n","    n_timesteps, n_features, n_outputs = trainX.shape[1], trainX.shape[2], trainy.shape[1]\n","    # reshape data into time steps of sub-sequences\n","    n_steps, n_length = 2, 4\n","    trainX = trainX.reshape((trainX.shape[0], n_steps, n_length, n_features))\n","    testX = testX.reshape((testX.shape[0], n_steps, n_length, n_features))\n","    # define model\n","    model = Sequential()\n","    model.add(TimeDistributed(Conv1D(filters=64, kernel_size=3, activation='relu', padding='same'), input_shape=(None,n_length,n_features)))\n","    model.add(TimeDistributed(Conv1D(filters=64, kernel_size=3, activation='relu', padding='same')))\n","    model.add(TimeDistributed(Dropout(0.5)))\n","    model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","    model.add(TimeDistributed(Flatten()))\n","    model.add(LSTM(300))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(300, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    # fit network\n","#   model.fit(trainX, trainy, epochs=epochs, batch_size=batch_size, verbose=verbose)\n","    model.fit(trainX, trainy, epochs=epochs, verbose=verbose)\n","    # evaluate model\n","#   _, accuracy = model.evaluate(testX, testy, batch_size=batch_size, verbose=0)\n","    _, accuracy = model.evaluate(testX, testy, verbose=0)\n","    return accuracy\n","\n","# summarize scores\n","def summarize_results(scores):\n","    print(scores)\n","    m, s = np.mean(scores), np.std(scores)\n","    print('Accuracy: %.3f%% (+/-%.3f)' % (m, s))\n","\n","# Normalize features per channel\n","def df_channel_norm(df, channels):\n","    df_norm = df.copy()\n","    for channel in pcf_channels:\n","        df_channel = df_norm.filter(regex=channel)\n","        df_norm[df_channel.columns] = df_channel.div(df_channel.sum(axis=1), axis='index')\n","    return df_norm\n","\n","# run an experiment\n","def run_experiment(df, repeats=10, sessions=[1,2,3], subjects=[1,2,3]):\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset(df, sessions, subjects)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)\n","\n","def run_experiment_by_subjects(df, repeats=10, subjects_train=[1,2], subjects_test=[3]):\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset_by_subjects(df, subjects_train, subjects_test)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)\n","\n","def run_experiment_customized(df, repeats=10, train_index=None, test_index=None):\n","    assert train_index is not None and test_index is not None, 'train_index/test_index must be in format [(subject_id, session_id),..]'\n","\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset_customized(df, train_index, test_index)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PV98J1PTGkXc","colab_type":"code","outputId":"05ca81db-e843-4179-b93e-cdb15db8036c","executionInfo":{"status":"ok","timestamp":1554415473036,"user_tz":-60,"elapsed":958,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["trainX, trainy, testX, testy = load_dataset_customized(df_train_pcf, train_tuple_list=[(1,1), (1,2)], test_tuple_list=[(1,3)])\n","trainX.shape, trainy.shape, testX.shape, testy.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((870, 8, 96), (870, 3), (446, 8, 96), (446, 3))"]},"metadata":{"tags":[]},"execution_count":16}]},{"metadata":{"id":"NyaHM8GSf4_Y","colab_type":"code","outputId":"057d0bae-324e-4209-a9d1-667e58a2b731","executionInfo":{"status":"ok","timestamp":1554415610597,"user_tz":-60,"elapsed":136238,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"cell_type":"code","source":["run_experiment_customized(df_channel_norm(df_train_pcf, pcf_channels), train_index=[(1,1), (1,2)], test_index=[(1,3)])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n",">#1: 70.404\n",">#2: 73.543\n",">#3: 69.955\n",">#4: 73.991\n",">#5: 74.439\n",">#6: 72.197\n",">#7: 71.076\n",">#8: 70.852\n",">#9: 72.870\n",">#10: 75.336\n","[70.4035875775889, 73.54260095031808, 69.95515681702994, 73.99103122976328, 74.43946180322246, 72.19730928339766, 71.0762330502138, 70.85201788376266, 72.8699552371363, 75.33632295014078]\n","Accuracy: 72.466% (+/-1.759)\n"],"name":"stdout"}]},{"metadata":{"id":"EgwZoVu_kVZs","colab_type":"code","outputId":"1e36187d-11b0-49b2-989a-663ce2c505ef","executionInfo":{"status":"ok","timestamp":1554334844364,"user_tz":-60,"elapsed":109512,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":245}},"cell_type":"code","source":["run_experiment_customized(df_channel_norm(df_train_pcf, pcf_channels), train_index=[(1,1)], test_index=[(1,2)])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 63.594\n",">#2: 71.889\n",">#3: 70.507\n",">#4: 71.429\n",">#5: 70.046\n",">#6: 70.968\n",">#7: 70.507\n",">#8: 71.889\n",">#9: 71.889\n",">#10: 70.968\n","[63.59447037569389, 71.88940061951563, 70.5069125797342, 71.42857156590932, 70.04608308664665, 70.96774163334051, 70.506912332526, 71.88940105899688, 71.88940105899688, 70.96774226509481]\n","Accuracy: 70.369% (+/-2.341)\n"],"name":"stdout"}]},{"metadata":{"id":"Ogjn8qjBkVcF","colab_type":"code","outputId":"8227b2fb-6797-4f2f-e95c-70d0937572e3","executionInfo":{"status":"ok","timestamp":1554335003977,"user_tz":-60,"elapsed":269124,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":245}},"cell_type":"code","source":["run_experiment_customized(df_channel_norm(df_train_pcf, pcf_channels), train_index=[(1,1)], test_index=[(1,3)])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 74.888\n",">#2: 66.816\n",">#3: 71.749\n",">#4: 73.094\n",">#5: 72.197\n",">#6: 66.816\n",">#7: 69.058\n",">#8: 74.439\n",">#9: 70.404\n",">#10: 73.094\n","[74.88789205593913, 66.81614317701536, 71.74887900395244, 73.09417008284495, 72.19730909629789, 66.81614317701536, 69.05829561665455, 74.43946156266558, 70.40358709647516, 73.09417008284495]\n","Accuracy: 71.256% (+/-2.760)\n"],"name":"stdout"}]},{"metadata":{"id":"9DzOgExxkbyj","colab_type":"code","outputId":"92e715c1-9820-4b56-d77f-ccb9a65a207c","executionInfo":{"status":"ok","timestamp":1554335215744,"user_tz":-60,"elapsed":480889,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":245}},"cell_type":"code","source":["run_experiment_customized(df_channel_norm(df_train_pcf, pcf_channels), train_index=[(1,2)], test_index=[(1,3)])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 78.924\n",">#2: 76.682\n",">#3: 78.924\n",">#4: 77.130\n",">#5: 79.372\n",">#6: 78.924\n",">#7: 77.130\n",">#8: 80.269\n",">#9: 82.063\n",">#10: 80.269\n","[78.92376686960057, 76.68161437650433, 78.92376692305766, 77.13004494996348, 79.37219698867456, 78.92376684287203, 77.13004486977788, 80.2690583494212, 82.06278029578684, 80.26905832269267]\n","Accuracy: 78.969% (+/-1.585)\n"],"name":"stdout"}]},{"metadata":{"id":"dDBxLODv-P3r","colab_type":"code","outputId":"7b4db2ac-a746-43de-e888-262dea83b754","executionInfo":{"status":"ok","timestamp":1554251067006,"user_tz":-60,"elapsed":300082,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"cell_type":"code","source":["run_experiment_by_subjects(df_channel_norm(df_train_pcf, pcf_channels), subjects_train=[1,2], subjects_test=[3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n",">#1: 58.140\n",">#2: 50.388\n",">#3: 55.814\n",">#4: 52.713\n",">#5: 58.140\n",">#6: 54.264\n",">#7: 57.364\n",">#8: 56.589\n",">#9: 55.039\n",">#10: 62.016\n","[58.139534883720934, 50.3875968992248, 55.81395348837209, 52.71317829457365, 58.139534883720934, 54.263565891472865, 57.36434108527132, 56.58914728682171, 55.03875968992248, 62.01550387596899]\n","Accuracy: 56.047% (+/-3.063)\n"],"name":"stdout"}]},{"metadata":{"id":"PL6-yCyCG52y","colab_type":"code","outputId":"114aaa69-8e1d-4a4d-8b21-316aa3b2e7d5","executionInfo":{"status":"ok","timestamp":1554251564427,"user_tz":-60,"elapsed":668532,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["run_experiment_by_subjects(df_train_pcf, subjects_train=[1,2], subjects_test=[3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 55.814\n",">#2: 55.814\n",">#3: 53.488\n",">#4: 55.039\n",">#5: 56.589\n",">#6: 55.814\n",">#7: 56.589\n",">#8: 57.364\n",">#9: 51.938\n",">#10: 54.264\n","[55.81395348837209, 55.81395348837209, 53.48837209302325, 55.03875968992248, 56.58914728682171, 55.81395348837209, 56.58914728682171, 57.36434108527132, 51.93798449612403, 54.263565891472865]\n","Accuracy: 55.271% (+/-1.552)\n"],"name":"stdout"}]},{"metadata":{"id":"cOvht2o0BBro","colab_type":"code","outputId":"d07cde1b-f911-4e87-884b-b8b86b2a2141","executionInfo":{"status":"ok","timestamp":1554252295577,"user_tz":-60,"elapsed":1399679,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[1])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 79.293\n",">#2: 79.798\n",">#3: 78.283\n",">#4: 79.798\n",">#5: 79.798\n",">#6: 79.798\n",">#7: 77.778\n",">#8: 76.768\n",">#9: 79.293\n",">#10: 79.798\n","[79.29292929292929, 79.7979797979798, 78.28282828282829, 79.7979797979798, 79.7979797979798, 79.7979797979798, 77.77777783798449, 76.76767682788348, 79.29292923272259, 79.7979797979798]\n","Accuracy: 79.040% (+/-1.016)\n"],"name":"stdout"}]},{"metadata":{"id":"pQ8iTOlVJ7xg","colab_type":"code","outputId":"58616487-e099-46a8-d0ef-b8a3f3e87b6c","executionInfo":{"status":"ok","timestamp":1554253165051,"user_tz":-60,"elapsed":2269148,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 65.128\n",">#2: 61.538\n",">#3: 62.564\n",">#4: 64.615\n",">#5: 67.179\n",">#6: 67.179\n",">#7: 68.205\n",">#8: 64.615\n",">#9: 65.128\n",">#10: 63.077\n","[65.1282051587716, 61.53846156902802, 62.564102594669045, 64.6153846459511, 67.17948721005367, 67.17948721005367, 68.20512823569469, 64.6153846459511, 65.1282051587716, 63.076923107489556]\n","Accuracy: 64.923% (+/-2.041)\n"],"name":"stdout"}]},{"metadata":{"id":"GJXpRknvJ7zv","colab_type":"code","outputId":"bc60a682-afbf-4906-ccd7-1909f425d141","executionInfo":{"status":"ok","timestamp":1554254170895,"user_tz":-60,"elapsed":3274990,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 52.850\n",">#2: 51.813\n",">#3: 54.922\n",">#4: 49.223\n",">#5: 48.705\n",">#6: 53.368\n",">#7: 48.187\n",">#8: 53.368\n",">#9: 46.632\n",">#10: 47.150\n","[52.84974093264248, 51.813471502590666, 54.92227979274611, 49.22279792746114, 48.704663212435236, 53.36787564766839, 48.18652849740933, 53.36787564766839, 46.63212435233161, 47.15025906735752]\n","Accuracy: 50.622% (+/-2.819)\n"],"name":"stdout"}]},{"metadata":{"id":"BIjih8N5J9sc","colab_type":"code","outputId":"f8f30144-cb20-4111-d9ce-132b278ff2aa","executionInfo":{"status":"ok","timestamp":1554255640341,"user_tz":-60,"elapsed":4744435,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[1,2,3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 62.969\n",">#2: 63.652\n",">#3: 61.945\n",">#4: 62.799\n",">#5: 60.751\n",">#6: 62.628\n",">#7: 63.481\n",">#8: 64.334\n",">#9: 63.140\n",">#10: 61.604\n","[62.96928327645052, 63.65187717379157, 61.94539253215334, 62.798634852972455, 60.75085328300658, 62.62798638880863, 63.48122870962774, 64.33447103044686, 63.1399317813001, 61.60409560382569]\n","Accuracy: 62.730% (+/-1.001)\n"],"name":"stdout"}]},{"metadata":{"id":"IzrIBY0VrK9M","colab_type":"code","outputId":"c12f9b8b-2cf5-4ece-f042-bc4d78fc867c","executionInfo":{"status":"ok","timestamp":1554260289703,"user_tz":-60,"elapsed":299230,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[1,2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n",">#1: 67.176\n",">#2: 67.684\n",">#3: 66.158\n",">#4: 68.957\n",">#5: 68.448\n",">#6: 65.649\n",">#7: 67.430\n",">#8: 67.939\n",">#9: 66.667\n",">#10: 69.211\n","[67.17557252287561, 67.68447839425113, 66.15776083699923, 68.9567430252944, 68.44783717287709, 65.64885496941535, 67.43002544908427, 67.93893130150157, 66.66666668941653, 69.21119593633647]\n","Accuracy: 67.532% (+/-1.104)\n"],"name":"stdout"}]}]}