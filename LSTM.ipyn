{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RNN Model - PCF.ipyn","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"6GEZ0gtRXWoZ","colab_type":"text"},"cell_type":"markdown","source":["Based on [this source code](https://machinelearningmastery.com/how-to-develop-rnn-models-for-human-activity-recognition-time-series-classification/)"]},{"metadata":{"id":"6Je6OUkqqsif","colab_type":"code","colab":{}},"cell_type":"code","source":["import os\n","from scipy.io import loadmat\n","import pandas as pd\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","# import seaborn as sns\n","%matplotlib inline\n","\n","import pickle\n","import re\n","from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9wT0eWLNqsii","colab_type":"text"},"cell_type":"markdown","source":["## Read Data"]},{"metadata":{"id":"VKUn9bgNj7Gl","colab_type":"text"},"cell_type":"markdown","source":["### Mount google drive - Skip this if running locally"]},{"metadata":{"id":"buThuWRhjOvM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Mount Google drive\n","from google.colab import drive\n","\n","# This will prompt for authorization.\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PdkRlyuMjqoh","colab_type":"code","colab":{}},"cell_type":"code","source":["# Here you must try by yourself where the path to the dataset folder is !!\n","# e.g. !ls \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","!ls \"gdrive\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"YSu2jDSckK5B","colab_type":"code","colab":{}},"cell_type":"code","source":["# Then assign the path here.\n","# This is the path for my GG drive, change it according to your path\n","# dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","\n","# Your folder path here\n","dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"FqSsDNBpqsip","colab_type":"text"},"cell_type":"markdown","source":["### Read data from csv"]},{"metadata":{"id":"PV64-5xDqsip","colab_type":"code","colab":{}},"cell_type":"code","source":["try:\n","  dataset_path\n","except:\n","  dataset_path = os.path.join(os.getcwd(), 'datasets')\n","\n","df_train_pcf = pd.read_csv(os.path.join(dataset_path, 'df_train_pcf.csv'))\n","df_test_pcf = pd.read_csv(os.path.join(dataset_path, 'df_test_pcf.csv'))\n","df_train_raw = pd.read_csv(os.path.join(dataset_path, 'df_train_raw.csv'))\n","df_test_raw = pd.read_csv(os.path.join(dataset_path, 'df_test_raw.csv'))\n","\n","label_dict = {2: 'left', 3: 'right', 7: 'word'}\n","df_train_pcf.replace({'label' : label_dict}, inplace=True)\n","df_train_raw.replace({'label' : label_dict}, inplace=True)\n","\n","pcf_setup = pickle.load(open(os.path.join(dataset_path, 'pcf_setup.obj'), \"rb\"))\n","raw_setup = pickle.load(open(os.path.join(dataset_path, 'raw_setup.obj'), \"rb\"))\n","\n","pcf_channels = pcf_setup['channels']\n","raw_channels = raw_setup['channels']"],"execution_count":0,"outputs":[]},{"metadata":{"id":"rJcl1hcL4gkM","colab_type":"text"},"cell_type":"markdown","source":["## CNN-LSTM"]},{"metadata":{"id":"ETpqnjuf6dDu","colab_type":"code","outputId":"9ba5f5e9-b10d-4f68-9870-3f7f65af6984","executionInfo":{"status":"ok","timestamp":1554426205468,"user_tz":-60,"elapsed":8703,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import Flatten\n","from keras.layers import Dropout\n","from keras.layers import LSTM\n","from keras.layers import TimeDistributed\n","from keras.layers.convolutional import Conv1D\n","from keras.layers.convolutional import MaxPooling1D\n","from keras.utils import to_categorical"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"9tjKa7cO4qoM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Load dataset\n","def load_dataset(df, train_tuple_list, test_tuple_list):\n","    data = df.copy()\n","    sampling_rate = 16\n","\n","    train_index = pd.Series([False] * data.shape[0])\n","    test_index = pd.Series([False] * data.shape[0])\n","    \n","    for subject, session in train_tuple_list:\n","        train_index |= (data['subject'] == subject) & (data['session'] == session)\n","    \n","    for subject, session in test_tuple_list:\n","        test_index |= (data['subject'] == subject) & (data['session'] == session)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    X_train = data[train_index][data_columns].values\n","    X_test = data[test_index][data_columns].values\n","    y_train = data[train_index]['label'].values\n","    y_test = data[test_index]['label'].values\n","  \n","    n_features = X_train.shape[1]\n","\n","    X_train = X_train.reshape(X_train.shape[0]//sampling_rate, sampling_rate, n_features)\n","    X_test = X_test.reshape(X_test.shape[0]//sampling_rate, sampling_rate, n_features)\n","    y_train = to_categorical(y_train[::sampling_rate])\n","    y_test = to_categorical(y_test[::sampling_rate])\n","\n","    return X_train, y_train, X_test, y_test\n","\n","# fit and evaluate a model\n","def evaluate_model_lstm(X_train, y_train, X_test, y_test):\n","    epochs = 25\n","    n_timesteps, n_features, n_outputs = X_train.shape[1], X_train.shape[2], y_train.shape[1]\n","    model = Sequential()\n","    model.add(LSTM(200, input_shape=(n_timesteps,n_features)))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(200, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n","    _, accuracy = model.evaluate(X_test, y_test, verbose=0)\n","    return accuracy\n","\n","def evaluate_model_cnn_lstm(X_train, y_train, X_test, y_test):\n","    # define model\n","    epochs = 25\n","    n_timesteps, n_features, n_outputs = X_train.shape[1], X_train.shape[2], y_train.shape[1]\n","\n","    # reshape data into time steps of sub-sequences\n","    n_steps, n_length = 2, 8\n","    X_train = X_train.reshape((X_train.shape[0], n_steps, n_length, n_features))\n","    X_test = X_test.reshape((X_test.shape[0], n_steps, n_length, n_features))\n","\n","    # define model\n","    model = Sequential()\n","    model.add(TimeDistributed(Conv1D(filters=64, kernel_size=3, activation='relu'), input_shape=(None,n_length,n_features)))\n","    model.add(TimeDistributed(Conv1D(filters=64, kernel_size=3, activation='relu')))\n","    model.add(TimeDistributed(Dropout(0.5)))\n","    model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","    model.add(TimeDistributed(Flatten()))\n","    model.add(LSTM(200))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(200, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n","    _, accuracy = model.evaluate(X_test, y_test, verbose=0)\n","    return accuracy\n","\n","# Normalize features per channel\n","def df_channel_norm(df, channels):\n","    df_norm = df.copy()\n","    for channel in pcf_channels:\n","        df_channel = df_norm.filter(regex=channel)\n","        df_norm[df_channel.columns] = df_channel.div(df_channel.sum(axis=1), axis='index')\n","    return df_norm\n","\n","def run_experiment(df, method='lstm', train_index=None, test_index=None, repeats=5):\n","    assert train_index is not None and test_index is not None, 'train_index/test_index must be in format [(subject_id, session_id),..]'\n","\n","    # load data\n","    X_train, y_train, X_test, y_test = load_dataset(df, train_index, test_index)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        if method == 'lstm':\n","            score = evaluate_model_lstm(X_train, y_train, X_test, y_test)\n","        elif method == 'cnn-lstm':\n","            score = evaluate_model_cnn_lstm(X_train, y_train, X_test, y_test)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","\n","    # Print accuracy\n","    m, s = np.mean(scores), np.std(scores)\n","    print('Train: {}, Test: {}, Accuracy: {:.2f}% (+/-{:.2f})'.format(train_index, test_index, m, s))\n","\n","    return summarize_results(scores)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PV98J1PTGkXc","colab_type":"code","colab":{}},"cell_type":"code","source":["trainX, trainy, testX, testy = load_dataset(df_train_pcf, train_tuple_list=[(1,1), (1,2)], test_tuple_list=[(1,3)])\n","trainX.shape, trainy.shape, testX.shape, testy.shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NyaHM8GSf4_Y","colab_type":"code","outputId":"52d84ba6-d4db-4055-8cac-936ec5962b58","executionInfo":{"status":"ok","timestamp":1554441176507,"user_tz":-60,"elapsed":9700077,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":4709}},"cell_type":"code","source":["test_condition = [\n","    ([(1,1), (1,2)], [(1,3)]),\n","    ([(2,1), (2,2)], [(2,3)]),\n","    ([(3,1), (3,2)], [(3,3)]),\n","    ([(1,1)], [(1,2)]),\n","    ([(1,1)], [(1,3)]),\n","    ([(1,2)], [(1,3)]),\n","    ([(2,1)], [(2,2)]),\n","    ([(2,1)], [(2,3)]),\n","    ([(2,2)], [(2,3)]),\n","    ([(3,1)], [(3,2)]),\n","    ([(3,1)], [(3,3)]),\n","    ([(3,2)], [(3,3)]),\n","]\n","\n","results = []\n","for train_con, test_con in test_condition:\n","    print('Train: {}, Test: {} ========================================'.format(train_con, test_con))\n","    print('Normalized:')\n","    %time m, s = run_experiment(df_channel_norm(df_train_pcf, pcf_channels), method='cnn-lstm', train_index=train_con, test_index=test_con)\n","    results.append((m,s))\n","    print('Not Normalized:')\n","    %time m, s = run_experiment(df_train_pcf, method='cnn-lstm', train_index=train_con, test_index=test_con)\n","    results.append((m,s))"],"execution_count":37,"outputs":[{"output_type":"stream","text":["Train: [(1, 1), (1, 2)], Test: [(1, 3)] ========================================\n","Normalized:\n",">#1: 74.439\n",">#2: 78.027\n",">#3: 77.130\n",">#4: 76.682\n",">#5: 75.336\n","Train: [(1, 1), (1, 2)], Test: [(1, 3)], Accuracy: 76.32% (+/-1.28)\n","[74.43946191013661, 78.02690550885393, 77.1300448965064, 76.68161445668996, 75.33632252248414]\n","Accuracy: 76.323% (+/-1.281)\n","CPU times: user 4min 2s, sys: 5.06 s, total: 4min 7s\n","Wall time: 4min 1s\n","Not Normalized:\n",">#1: 78.924\n",">#2: 78.475\n",">#3: 77.130\n",">#4: 76.682\n",">#5: 77.578\n","Train: [(1, 1), (1, 2)], Test: [(1, 3)], Accuracy: 77.76% (+/-0.83)\n","[78.92376684287203, 78.47533634959849, 77.1300448965064, 76.68161394884768, 77.57847496212331]\n","Accuracy: 77.758% (+/-0.832)\n","CPU times: user 4min 17s, sys: 5.06 s, total: 4min 22s\n","Wall time: 4min 15s\n","Train: [(2, 1), (2, 2)], Test: [(2, 3)] ========================================\n","Normalized:\n",">#1: 67.281\n",">#2: 64.977\n",">#3: 64.516\n",">#4: 62.673\n",">#5: 61.751\n","Train: [(2, 1), (2, 2)], Test: [(2, 3)], Accuracy: 64.24% (+/-1.92)\n","[67.28110612812131, 64.97695885495656, 64.5161291146608, 62.67281075776447, 61.75115240334365]\n","Accuracy: 64.240% (+/-1.924)\n","CPU times: user 4min 31s, sys: 5.33 s, total: 4min 36s\n","Wall time: 4min 30s\n","Not Normalized:\n",">#1: 63.594\n",">#2: 68.203\n",">#3: 63.594\n",">#4: 64.055\n",">#5: 66.359\n","Train: [(2, 1), (2, 2)], Test: [(2, 3)], Accuracy: 65.16% (+/-1.83)\n","[63.59446988127748, 68.20276485335442, 63.59447037569389, 64.05529956663808, 66.35944688100419]\n","Accuracy: 65.161% (+/-1.834)\n","CPU times: user 4min 48s, sys: 5.22 s, total: 4min 53s\n","Wall time: 4min 47s\n","Train: [(3, 1), (3, 2)], Test: [(3, 3)] ========================================\n","Normalized:\n",">#1: 46.977\n",">#2: 41.395\n",">#3: 45.116\n",">#4: 45.116\n",">#5: 40.465\n","Train: [(3, 1), (3, 2)], Test: [(3, 3)], Accuracy: 43.81% (+/-2.47)\n","[46.976744019707965, 41.39534867087076, 45.11627912521362, 45.1162789034289, 40.46511641768522]\n","Accuracy: 43.814% (+/-2.468)\n","CPU times: user 4min 58s, sys: 5.32 s, total: 5min 4s\n","Wall time: 4min 57s\n","Not Normalized:\n",">#1: 43.721\n",">#2: 40.930\n",">#3: 40.930\n",">#4: 43.721\n",">#5: 40.000\n","Train: [(3, 1), (3, 2)], Test: [(3, 3)], Accuracy: 41.86% (+/-1.56)\n","[43.720930066219594, 40.93023250269335, 40.93023280764735, 43.720930066219594, 39.99999986138455]\n","Accuracy: 41.860% (+/-1.557)\n","CPU times: user 5min 12s, sys: 5.5 s, total: 5min 17s\n","Wall time: 5min 11s\n","Train: [(1, 1)], Test: [(1, 2)] ========================================\n","Normalized:\n",">#1: 72.350\n",">#2: 68.664\n",">#3: 62.212\n",">#4: 68.664\n",">#5: 70.507\n","Train: [(1, 1)], Test: [(1, 2)], Accuracy: 68.48% (+/-3.42)\n","[72.35023055208444, 68.66359436017578, 62.211981635489224, 68.66359460738397, 70.50691214025295]\n","Accuracy: 68.479% (+/-3.419)\n","CPU times: user 5min 11s, sys: 4.27 s, total: 5min 15s\n","Wall time: 5min 12s\n","Not Normalized:\n",">#1: 75.576\n",">#2: 77.419\n",">#3: 72.350\n",">#4: 72.350\n",">#5: 75.115\n","Train: [(1, 1)], Test: [(1, 2)], Accuracy: 74.56% (+/-1.96)\n","[75.57603700369734, 77.41935497604757, 72.35023049714928, 72.35023074435748, 75.11520726340157]\n","Accuracy: 74.562% (+/-1.964)\n","CPU times: user 5min 21s, sys: 4.38 s, total: 5min 25s\n","Wall time: 5min 22s\n","Train: [(1, 1)], Test: [(1, 3)] ========================================\n","Normalized:\n",">#1: 73.991\n",">#2: 73.543\n",">#3: 68.161\n",">#4: 65.471\n",">#5: 69.058\n","Train: [(1, 1)], Test: [(1, 3)], Accuracy: 70.04% (+/-3.26)\n","[73.99103147032015, 73.5426005761185, 68.16143503103555, 65.4708520713943, 69.05829604431119]\n","Accuracy: 70.045% (+/-3.263)\n","CPU times: user 5min 40s, sys: 4.52 s, total: 5min 45s\n","Wall time: 5min 41s\n","Not Normalized:\n",">#1: 75.336\n",">#2: 69.507\n",">#3: 76.682\n",">#4: 76.682\n",">#5: 74.439\n","Train: [(1, 1)], Test: [(1, 3)], Accuracy: 74.53% (+/-2.65)\n","[75.33632292341224, 69.50672645739911, 76.68161440323287, 76.68161394884768, 74.43946148247996]\n","Accuracy: 74.529% (+/-2.651)\n","CPU times: user 5min 50s, sys: 4.38 s, total: 5min 54s\n","Wall time: 5min 51s\n","Train: [(1, 2)], Test: [(1, 3)] ========================================\n","Normalized:\n",">#1: 80.717\n",">#2: 80.717\n",">#3: 79.821\n",">#4: 78.027\n",">#5: 81.614\n","Train: [(1, 2)], Test: [(1, 3)], Accuracy: 80.18% (+/-1.22)\n","[80.7174884150381, 80.7174884150381, 79.82062745521957, 78.02690585632496, 81.61434940158519]\n","Accuracy: 80.179% (+/-1.217)\n","CPU times: user 6min 6s, sys: 4.5 s, total: 6min 11s\n","Wall time: 6min 7s\n","Not Normalized:\n",">#1: 79.821\n",">#2: 78.475\n",">#3: 78.475\n",">#4: 78.924\n",">#5: 78.475\n","Train: [(1, 2)], Test: [(1, 3)], Accuracy: 78.83% (+/-0.52)\n","[79.82062782941912, 78.47533634959849, 78.47533637632704, 78.92376686960057, 78.47533634959849]\n","Accuracy: 78.834% (+/-0.523)\n","CPU times: user 6min 22s, sys: 4.67 s, total: 6min 26s\n","Wall time: 6min 23s\n","Train: [(2, 1)], Test: [(2, 2)] ========================================\n","Normalized:\n",">#1: 59.722\n",">#2: 56.019\n",">#3: 57.407\n",">#4: 54.630\n",">#5: 56.481\n","Train: [(2, 1)], Test: [(2, 2)], Accuracy: 56.85% (+/-1.69)\n","[59.72222233260119, 56.01851846332904, 57.407407407407405, 54.629629629629626, 56.481481481481474]\n","Accuracy: 56.852% (+/-1.692)\n","CPU times: user 6min 38s, sys: 4.64 s, total: 6min 43s\n","Wall time: 6min 39s\n","Not Normalized:\n",">#1: 57.870\n",">#2: 54.630\n",">#3: 55.556\n",">#4: 59.259\n",">#5: 51.389\n","Train: [(2, 1)], Test: [(2, 2)], Accuracy: 55.74% (+/-2.72)\n","[57.8703702599914, 54.629629519250656, 55.55555555555556, 59.25925925925925, 51.388888888888886]\n","Accuracy: 55.741% (+/-2.725)\n","CPU times: user 6min 55s, sys: 4.87 s, total: 7min\n","Wall time: 6min 56s\n","Train: [(2, 1)], Test: [(2, 3)] ========================================\n","Normalized:\n",">#1: 54.839\n",">#2: 57.143\n",">#3: 56.221\n",">#4: 53.917\n",">#5: 59.447\n","Train: [(2, 1)], Test: [(2, 3)], Accuracy: 56.31% (+/-1.92)\n","[54.838709457678725, 57.14285701925304, 56.22119812921444, 53.917050663776664, 59.447004388554305]\n","Accuracy: 56.313% (+/-1.920)\n","CPU times: user 7min 10s, sys: 4.87 s, total: 7min 15s\n","Wall time: 7min 12s\n","Not Normalized:\n",">#1: 56.682\n",">#2: 53.456\n",">#3: 56.221\n",">#4: 59.908\n",">#5: 56.221\n","Train: [(2, 1)], Test: [(2, 3)], Accuracy: 56.50% (+/-2.05)\n","[56.68202752616548, 53.456221362962154, 56.221198225350975, 59.90783407391491, 56.221198033077926]\n","Accuracy: 56.498% (+/-2.053)\n","CPU times: user 7min 32s, sys: 4.83 s, total: 7min 37s\n","Wall time: 7min 34s\n","Train: [(2, 2)], Test: [(2, 3)] ========================================\n","Normalized:\n",">#1: 59.447\n",">#2: 61.751\n",">#3: 62.212\n",">#4: 58.986\n",">#5: 60.369\n","Train: [(2, 2)], Test: [(2, 3)], Accuracy: 60.55% (+/-1.26)\n","[59.447004745632825, 61.75115201879756, 62.21198170415817, 58.986175444818315, 60.36866392408099]\n","Accuracy: 60.553% (+/-1.257)\n","CPU times: user 7min 45s, sys: 5.11 s, total: 7min 50s\n","Wall time: 7min 46s\n","Not Normalized:\n",">#1: 64.516\n",">#2: 61.290\n",">#3: 63.594\n",">#4: 67.742\n",">#5: 60.369\n","Train: [(2, 2)], Test: [(2, 3)], Accuracy: 63.50% (+/-2.60)\n","[64.51612892238775, 61.2903222785018, 63.59447037569389, 67.74193518172761, 60.36866329232669]\n","Accuracy: 63.502% (+/-2.597)\n","CPU times: user 7min 59s, sys: 5.09 s, total: 8min 4s\n","Wall time: 8min 1s\n","Train: [(3, 1)], Test: [(3, 2)] ========================================\n","Normalized:\n",">#1: 50.935\n",">#2: 56.542\n",">#3: 50.467\n",">#4: 55.607\n",">#5: 56.075\n","Train: [(3, 1)], Test: [(3, 2)], Accuracy: 53.93% (+/-2.65)\n","[50.93457960636816, 56.54205624188218, 50.46728985888935, 55.607476607661376, 56.07476641084547]\n","Accuracy: 53.925% (+/-2.653)\n","CPU times: user 8min 17s, sys: 5.31 s, total: 8min 23s\n","Wall time: 8min 19s\n","Not Normalized:\n",">#1: 48.131\n",">#2: 53.738\n",">#3: 57.477\n",">#4: 44.393\n",">#5: 49.065\n","Train: [(3, 1)], Test: [(3, 2)], Accuracy: 50.56% (+/-4.56)\n","[48.13084106579005, 53.738317979830455, 57.476635402608146, 44.392523448043896, 49.065420644305576]\n","Accuracy: 50.561% (+/-4.563)\n","CPU times: user 8min 36s, sys: 5.4 s, total: 8min 41s\n","Wall time: 8min 38s\n","Train: [(3, 1)], Test: [(3, 3)] ========================================\n","Normalized:\n",">#1: 43.256\n",">#2: 42.326\n",">#3: 47.907\n",">#4: 39.070\n",">#5: 45.116\n","Train: [(3, 1)], Test: [(3, 3)], Accuracy: 43.53% (+/-2.94)\n","[43.255814092103826, 42.325581339902655, 47.9069765778475, 39.06976769136828, 45.11627931927526]\n","Accuracy: 43.535% (+/-2.936)\n","CPU times: user 8min 55s, sys: 5.4 s, total: 9min\n","Wall time: 8min 57s\n","Not Normalized:\n",">#1: 45.116\n",">#2: 44.651\n",">#3: 42.791\n",">#4: 42.791\n",">#5: 46.977\n","Train: [(3, 1)], Test: [(3, 3)], Accuracy: 44.47% (+/-1.57)\n","[45.1162789034289, 44.65116262435913, 42.79069770214169, 42.79069772986478, 46.976744144461875]\n","Accuracy: 44.465% (+/-1.573)\n","CPU times: user 9min 17s, sys: 6.43 s, total: 9min 23s\n","Wall time: 9min 20s\n","Train: [(3, 2)], Test: [(3, 3)] ========================================\n","Normalized:\n",">#1: 37.674\n",">#2: 37.209\n",">#3: 40.465\n",">#4: 36.744\n",">#5: 39.535\n","Train: [(3, 2)], Test: [(3, 3)], Accuracy: 38.33% (+/-1.43)\n","[37.674418452174166, 37.209302283996756, 40.46511611273122, 36.74418611581935, 39.53488356845323]\n","Accuracy: 38.326% (+/-1.429)\n","CPU times: user 9min 39s, sys: 5.79 s, total: 9min 45s\n","Wall time: 9min 41s\n","Not Normalized:\n",">#1: 38.140\n",">#2: 41.395\n",">#3: 40.465\n",">#4: 34.884\n",">#5: 41.395\n","Train: [(3, 2)], Test: [(3, 3)], Accuracy: 39.26% (+/-2.49)\n","[38.1395348421363, 41.39534879562466, 40.46511611273122, 34.88372098567874, 41.39534879562466]\n","Accuracy: 39.256% (+/-2.489)\n","CPU times: user 10min 4s, sys: 6.21 s, total: 10min 10s\n","Wall time: 10min 7s\n"],"name":"stdout"}]}]}