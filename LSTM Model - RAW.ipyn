{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BOSS - LSTM Model - RAW.ipyn","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"6GEZ0gtRXWoZ","colab_type":"text"},"cell_type":"markdown","source":["ref: https://machinelearningmastery.com/how-to-develop-rnn-models-for-human-activity-recognition-time-series-classification/"]},{"metadata":{"id":"6Je6OUkqqsif","colab_type":"code","colab":{}},"cell_type":"code","source":["import os\n","from scipy.io import loadmat\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","import pickle\n","import re\n","\n","from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9wT0eWLNqsii","colab_type":"text"},"cell_type":"markdown","source":["## Read Data"]},{"metadata":{"id":"VKUn9bgNj7Gl","colab_type":"text"},"cell_type":"markdown","source":["### Mount google drive"]},{"metadata":{"id":"buThuWRhjOvM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Mount Google drive\n","from google.colab import drive\n","\n","# This will prompt for authorization.\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PdkRlyuMjqoh","colab_type":"code","colab":{}},"cell_type":"code","source":["# Here you must try by yourself where the path to the dataset folder is !!\n","# e.g. !ls \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","!ls \"gdrive\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"YSu2jDSckK5B","colab_type":"code","colab":{}},"cell_type":"code","source":["# Then assign the path here.\n","# This is the path for my GG drive, change it according to your path\n","# dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","\n","# Your folder path here\n","dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"FqSsDNBpqsip","colab_type":"text"},"cell_type":"markdown","source":["### Read data from csv"]},{"metadata":{"id":"PV64-5xDqsip","colab_type":"code","colab":{}},"cell_type":"code","source":["try:\n","  dataset_path\n","except:\n","  dataset_path = os.path.join(os.getcwd(), 'datasets')\n","\n","df_train_pcf = pd.read_csv(os.path.join(dataset_path, 'df_train_pcf.csv'))\n","df_test_pcf = pd.read_csv(os.path.join(dataset_path, 'df_test_pcf.csv'))\n","df_train_raw = pd.read_csv(os.path.join(dataset_path, 'df_train_raw.csv'))\n","df_test_raw = pd.read_csv(os.path.join(dataset_path, 'df_test_raw.csv'))\n","\n","label_dict = {2: 'left', 3: 'right', 7: 'word'}\n","df_train_pcf.replace({'label' : label_dict}, inplace=True)\n","df_train_raw.replace({'label' : label_dict}, inplace=True)\n","\n","pcf_setup = pickle.load(open(os.path.join(dataset_path, 'pcf_setup.obj'), \"rb\"))\n","raw_setup = pickle.load(open(os.path.join(dataset_path, 'raw_setup.obj'), \"rb\"))\n","\n","pcf_channels = pcf_setup['channels']\n","raw_channels = raw_setup['channels']"],"execution_count":0,"outputs":[]},{"metadata":{"id":"rJcl1hcL4gkM","colab_type":"text"},"cell_type":"markdown","source":["## LSTM"]},{"metadata":{"id":"TjzpoT0JlT2x","colab_type":"code","outputId":"a2cbc822-5d9b-48b3-f311-378f4db90669","executionInfo":{"status":"ok","timestamp":1554295744492,"user_tz":-60,"elapsed":666,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["df_train_pcf.shape, df_train_raw.shape"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((31216, 99), (1096192, 35))"]},"metadata":{"tags":[]},"execution_count":5}]},{"metadata":{"id":"ETpqnjuf6dDu","colab_type":"code","outputId":"1186dde3-c212-4eb5-eaf3-fcef9f017102","executionInfo":{"status":"ok","timestamp":1554295745841,"user_tz":-60,"elapsed":1819,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import Flatten\n","from keras.layers import Dropout\n","from keras.layers import LSTM\n","from keras.layers import TimeDistributed\n","from keras.layers.convolutional import Conv1D\n","from keras.layers.convolutional import MaxPooling1D\n","from keras.utils import to_categorical"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"9tjKa7cO4qoM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Load dataset\n","def load_dataset(df, sessions=[1,2,3], subjects=[1,2,3]):\n","    data = df.copy()\n","    sampling_rate = 512\n","\n","    interest_index = data['session'].isin(sessions) & data['subject'].isin(subjects)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    X = data[interest_index][data_columns].values\n","    y = data[interest_index]['label'].values\n","  \n","    n_features = X.shape[1]\n","  \n","    X = X.reshape(X.shape[0]//sampling_rate, sampling_rate, n_features)\n","    y = to_categorical(y[::sampling_rate])\n","\n","    trainX, testX, trainy, testy = train_test_split(X, y, test_size=0.3, random_state=1)\n","    return trainX, trainy, testX, testy\n","\n","def load_dataset_by_subjects(df, subjects_train=[1,2], subjects_test=[3]):\n","    data = df.copy()\n","    sampling_rate = 512\n","\n","    train_index = data['subject'].isin(subjects_train)\n","    test_index = data['subject'].isin(subjects_test)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    trainX = data[train_index][data_columns].values\n","    testX = data[test_index][data_columns].values\n","    trainy = data[train_index]['label'].values\n","    testy = data[test_index]['label'].values\n","  \n","    n_features = trainX.shape[1]\n","\n","    trainX = trainX.reshape(trainX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    testX = testX.reshape(testX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    trainy = to_categorical(trainy[::sampling_rate])\n","    testy = to_categorical(testy[::sampling_rate])\n","\n","    return trainX, trainy, testX, testy\n","\n","# fit and evaluate a model\n","def evaluate_model(trainX, trainy, testX, testy):\n","    verbose, epochs, batch_size = 0, 15, 8\n","    n_timesteps, n_features, n_outputs = trainX.shape[1], trainX.shape[2], trainy.shape[1]\n","    model = Sequential()\n","    model.add(LSTM(100, input_shape=(n_timesteps,n_features)))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(100, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    # fit network\n","#   model.fit(trainX, trainy, epochs=epochs, batch_size=batch_size, verbose=verbose)\n","    model.fit(trainX, trainy, epochs=epochs, verbose=verbose)\n","    # evaluate model\n","#   _, accuracy = model.evaluate(testX, testy, batch_size=batch_size, verbose=0)\n","    _, accuracy = model.evaluate(testX, testy, verbose=0)\n","    return accuracy\n","\n","# summarize scores\n","def summarize_results(scores):\n","    print(scores)\n","    m, s = np.mean(scores), np.std(scores)\n","    print('Accuracy: %.3f%% (+/-%.3f)' % (m, s))\n","\n","# Normalize features per channel\n","def df_channel_norm(df, channels):\n","    df_norm = df.copy()\n","    for channel in pcf_channels:\n","        df_channel = df_norm.filter(regex=channel)\n","        df_norm[df_channel.columns] = df_channel.div(df_channel.sum(axis=1), axis='index')\n","    return df_norm\n","\n","# run an experiment\n","def run_experiment(df, repeats=10, sessions=[1,2,3], subjects=[1,2,3]):\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset(df, sessions, subjects)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)\n","\n","def run_experiment_by_subjects(df, repeats=10, subjects_train=[1,2], subjects_test=[3]):\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset_by_subjects(df, subjects_train, subjects_test)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PV98J1PTGkXc","colab_type":"code","outputId":"a029d837-c600-42b2-f6a1-a96125028cfd","executionInfo":{"status":"ok","timestamp":1554297111584,"user_tz":-60,"elapsed":2703,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["trainX, trainy, testX, testy = load_dataset(df_train_raw)\n","trainX.shape, trainy.shape, testX.shape, testy.shape"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1498, 512, 32), (1498, 3), (643, 512, 32), (643, 3))"]},"metadata":{"tags":[]},"execution_count":8}]},{"metadata":{"id":"qlsXd2fJ2dkw","colab_type":"code","outputId":"0d360e50-c4d0-4b87-b59a-775134495f52","executionInfo":{"status":"ok","timestamp":1554303523137,"user_tz":-60,"elapsed":2055822,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"cell_type":"code","source":["run_experiment_by_subjects(df_train_raw, subjects_train=[1,2], subjects_test=[3], repeats=3)"],"execution_count":12,"outputs":[{"output_type":"stream","text":[">#1: 35.021\n",">#2: 30.802\n",">#3: 33.474\n","[35.0210970464135, 30.801687763713083, 33.47398030942335]\n","Accuracy: 33.099% (+/-1.743)\n"],"name":"stdout"}]},{"metadata":{"id":"cOvht2o0BBro","colab_type":"code","colab":{}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_raw, sessions=[1,2,3], subjects=[1])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"pQ8iTOlVJ7xg","colab_type":"code","colab":{}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_raw, sessions=[1,2,3], subjects=[2])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GJXpRknvJ7zv","colab_type":"code","colab":{}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_raw, sessions=[1,2,3], subjects=[3])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"BIjih8N5J9sc","colab_type":"code","colab":{}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_raw, sessions=[1,2,3], subjects=[1,2,3])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"IzrIBY0VrK9M","colab_type":"code","colab":{}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_raw, sessions=[1,2,3], subjects=[1,2])"],"execution_count":0,"outputs":[]}]}