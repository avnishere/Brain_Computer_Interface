{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BOSS - LSTM Model - PCF.ipyn","version":"0.3.2","provenance":[],"collapsed_sections":["VKUn9bgNj7Gl","FqSsDNBpqsip"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"6GEZ0gtRXWoZ","colab_type":"text"},"cell_type":"markdown","source":["ref: https://machinelearningmastery.com/how-to-develop-rnn-models-for-human-activity-recognition-time-series-classification/"]},{"metadata":{"id":"6Je6OUkqqsif","colab_type":"code","colab":{}},"cell_type":"code","source":["import os\n","from scipy.io import loadmat\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","import pickle\n","import re\n","\n","from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9wT0eWLNqsii","colab_type":"text"},"cell_type":"markdown","source":["## Read Data"]},{"metadata":{"id":"VKUn9bgNj7Gl","colab_type":"text"},"cell_type":"markdown","source":["### Mount google drive"]},{"metadata":{"id":"buThuWRhjOvM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Mount Google drive\n","from google.colab import drive\n","\n","# This will prompt for authorization.\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PdkRlyuMjqoh","colab_type":"code","colab":{}},"cell_type":"code","source":["# Here you must try by yourself where the path to the dataset folder is !!\n","# e.g. !ls \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","!ls \"gdrive\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"YSu2jDSckK5B","colab_type":"code","colab":{}},"cell_type":"code","source":["# Then assign the path here.\n","# This is the path for my GG drive, change it according to your path\n","# dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\"\n","\n","# Your folder path here\n","dataset_path = \"gdrive/My Drive/Colab Notebooks/DME/datasets\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"FqSsDNBpqsip","colab_type":"text"},"cell_type":"markdown","source":["### Read data from csv"]},{"metadata":{"id":"PV64-5xDqsip","colab_type":"code","colab":{}},"cell_type":"code","source":["try:\n","  dataset_path\n","except:\n","  dataset_path = os.path.join(os.getcwd(), 'datasets')\n","\n","df_train_pcf = pd.read_csv(os.path.join(dataset_path, 'df_train_pcf.csv'))\n","df_test_pcf = pd.read_csv(os.path.join(dataset_path, 'df_test_pcf.csv'))\n","df_train_raw = pd.read_csv(os.path.join(dataset_path, 'df_train_raw.csv'))\n","df_test_raw = pd.read_csv(os.path.join(dataset_path, 'df_test_raw.csv'))\n","\n","label_dict = {2: 'left', 3: 'right', 7: 'word'}\n","df_train_pcf.replace({'label' : label_dict}, inplace=True)\n","df_train_raw.replace({'label' : label_dict}, inplace=True)\n","\n","pcf_setup = pickle.load(open(os.path.join(dataset_path, 'pcf_setup.obj'), \"rb\"))\n","raw_setup = pickle.load(open(os.path.join(dataset_path, 'raw_setup.obj'), \"rb\"))\n","\n","pcf_channels = pcf_setup['channels']\n","raw_channels = raw_setup['channels']"],"execution_count":0,"outputs":[]},{"metadata":{"id":"rJcl1hcL4gkM","colab_type":"text"},"cell_type":"markdown","source":["## LSTM"]},{"metadata":{"id":"ETpqnjuf6dDu","colab_type":"code","outputId":"7d79825b-8fa2-4305-ff9e-17eb23ba7473","executionInfo":{"status":"ok","timestamp":1554250605746,"user_tz":-60,"elapsed":12641,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import Flatten\n","from keras.layers import Dropout\n","from keras.layers import LSTM\n","from keras.layers import TimeDistributed\n","from keras.layers.convolutional import Conv1D\n","from keras.layers.convolutional import MaxPooling1D\n","from keras.utils import to_categorical"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"9tjKa7cO4qoM","colab_type":"code","colab":{}},"cell_type":"code","source":["# Load dataset\n","def load_dataset(df, sessions=[1,2,3], subjects=[1,2,3]):\n","    data = df.copy()\n","    sampling_rate = 16\n","\n","    interest_index = data['session'].isin(sessions) & data['subject'].isin(subjects)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    X = data[interest_index][data_columns].values\n","    y = data[interest_index]['label'].values\n","  \n","    n_features = X.shape[1]\n","  \n","    X = X.reshape(X.shape[0]//sampling_rate, sampling_rate, n_features)\n","    y = to_categorical(y[::sampling_rate])\n","\n","    trainX, testX, trainy, testy = train_test_split(X, y, test_size=0.3, random_state=1)\n","    return trainX, trainy, testX, testy\n","\n","def load_dataset_by_subjects(df, subjects_train=[1,2], subjects_test=[3]):\n","    data = df.copy()\n","    sampling_rate = 16\n","\n","    train_index = data['subject'].isin(subjects_train)\n","    test_index = data['subject'].isin(subjects_test)\n","\n","    data_columns = data.drop(columns=['label', 'session', 'subject']).columns\n","  \n","    label_dict = {'left': 0, 'right': 1, 'word': 2}\n","    data.replace({'label' : label_dict}, inplace=True)\n","\n","    trainX = data[train_index][data_columns].values\n","    testX = data[test_index][data_columns].values\n","    trainy = data[train_index]['label'].values\n","    testy = data[test_index]['label'].values\n","  \n","    n_features = trainX.shape[1]\n","\n","    trainX = trainX.reshape(trainX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    testX = testX.reshape(testX.shape[0]//sampling_rate, sampling_rate, n_features)\n","    trainy = to_categorical(trainy[::sampling_rate])\n","    testy = to_categorical(testy[::sampling_rate])\n","\n","    return trainX, trainy, testX, testy\n","\n","# fit and evaluate a model\n","def evaluate_model(trainX, trainy, testX, testy):\n","    verbose, epochs, batch_size = 0, 15, 8\n","    n_timesteps, n_features, n_outputs = trainX.shape[1], trainX.shape[2], trainy.shape[1]\n","    model = Sequential()\n","    model.add(LSTM(100, input_shape=(n_timesteps,n_features)))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(100, activation='relu'))\n","    model.add(Dense(n_outputs, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    # fit network\n","#   model.fit(trainX, trainy, epochs=epochs, batch_size=batch_size, verbose=verbose)\n","    model.fit(trainX, trainy, epochs=epochs, verbose=verbose)\n","    # evaluate model\n","#   _, accuracy = model.evaluate(testX, testy, batch_size=batch_size, verbose=0)\n","    _, accuracy = model.evaluate(testX, testy, verbose=0)\n","    return accuracy\n","\n","# summarize scores\n","def summarize_results(scores):\n","    print(scores)\n","    m, s = np.mean(scores), np.std(scores)\n","    print('Accuracy: %.3f%% (+/-%.3f)' % (m, s))\n","\n","# Normalize features per channel\n","def df_channel_norm(df, channels):\n","    df_norm = df.copy()\n","    for channel in pcf_channels:\n","        df_channel = df_norm.filter(regex=channel)\n","        df_norm[df_channel.columns] = df_channel.div(df_channel.sum(axis=1), axis='index')\n","    return df_norm\n","\n","# run an experiment\n","def run_experiment(df, repeats=10, sessions=[1,2,3], subjects=[1,2,3]):\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset(df, sessions, subjects)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)\n","\n","def run_experiment_by_subjects(df, repeats=10, subjects_train=[1,2], subjects_test=[3]):\n","    # load data\n","    trainX, trainy, testX, testy = load_dataset_by_subjects(df, subjects_train, subjects_test)\n","    # repeat experiment\n","    scores = list()\n","    for r in range(repeats):\n","        score = evaluate_model(trainX, trainy, testX, testy)\n","        score = score * 100.0\n","        print('>#%d: %.3f' % (r+1, score))\n","        scores.append(score)\n","    # summarize results\n","    summarize_results(scores)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PV98J1PTGkXc","colab_type":"code","outputId":"c681c40c-257c-4b50-8fb8-0c67e347a5cf","executionInfo":{"status":"ok","timestamp":1554250634852,"user_tz":-60,"elapsed":627,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["trainX, trainy, testX, testy = load_dataset(df_train_pcf)\n","trainX.shape, trainy.shape, testX.shape, testy.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1365, 16, 96), (1365, 3), (586, 16, 96), (586, 3))"]},"metadata":{"tags":[]},"execution_count":9}]},{"metadata":{"id":"qlsXd2fJ2dkw","colab_type":"code","outputId":"69a62a10-b0f7-4fe9-d01a-ffc535ff4a21","executionInfo":{"status":"ok","timestamp":1554251461271,"user_tz":-60,"elapsed":821693,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"cell_type":"code","source":["run_experiment_by_subjects(df_channel_norm(df_train_pcf, pcf_channels), subjects_train=[1,2], subjects_test=[3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n",">#1: 34.837\n",">#2: 34.837\n",">#3: 35.770\n",">#4: 35.303\n",">#5: 36.236\n",">#6: 36.858\n",">#7: 35.614\n",">#8: 35.925\n",">#9: 36.081\n",">#10: 35.303\n","[34.83670295489891, 34.83670295489891, 35.769828926905134, 35.30326594090202, 36.236391912908246, 36.85847589424572, 35.61430793157076, 35.925349922239505, 36.08087091757387, 35.30326594090202]\n","Accuracy: 35.677% (+/-0.603)\n"],"name":"stdout"}]},{"metadata":{"id":"Aqj-hNREGy0V","colab_type":"code","outputId":"d8f3d419-78e7-4f94-e920-3720fd65a180","executionInfo":{"status":"ok","timestamp":1554252498070,"user_tz":-60,"elapsed":1610249,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["run_experiment_by_subjects(df_train_pcf, subjects_train=[1,2], subjects_test=[3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 36.236\n",">#2: 35.614\n",">#3: 34.526\n",">#4: 38.258\n",">#5: 37.947\n",">#6: 36.236\n",">#7: 37.170\n",">#8: 35.148\n",">#9: 35.614\n",">#10: 36.081\n","[36.236391912908246, 35.61430793157076, 34.52566096423017, 38.25816485688994, 37.947122861586315, 36.236391912908246, 37.16951788491446, 35.14774494556765, 35.61430793157076, 36.08087091757387]\n","Accuracy: 36.283% (+/-1.130)\n"],"name":"stdout"}]},{"metadata":{"id":"cOvht2o0BBro","colab_type":"code","outputId":"14fc23ec-cd14-4254-ceec-7e935047f0f2","executionInfo":{"status":"ok","timestamp":1554253151227,"user_tz":-60,"elapsed":2263350,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[1])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 76.768\n",">#2: 78.788\n",">#3: 77.778\n",">#4: 77.778\n",">#5: 78.283\n",">#6: 75.758\n",">#7: 80.303\n",">#8: 79.293\n",">#9: 77.273\n",">#10: 71.212\n","[76.76767676767676, 78.78787872767208, 77.77777777777779, 77.77777771757106, 78.28282828282829, 75.75757569736905, 80.3030303030303, 79.29292929292929, 77.27272727272727, 71.21212127232792]\n","Accuracy: 77.323% (+/-2.374)\n"],"name":"stdout"}]},{"metadata":{"id":"pQ8iTOlVJ7xg","colab_type":"code","outputId":"b78db2e1-94a0-46f6-e838-dd0ee59f415a","executionInfo":{"status":"ok","timestamp":1554253922449,"user_tz":-60,"elapsed":3034534,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 60.513\n",">#2: 63.077\n",">#3: 60.000\n",">#4: 62.051\n",">#5: 58.462\n",">#6: 62.051\n",">#7: 61.538\n",">#8: 61.026\n",">#9: 63.590\n",">#10: 62.564\n","[60.512820543387, 63.076923107489556, 60.00000003056648, 62.051282081848534, 58.46153849210495, 62.051282081848534, 61.53846156902802, 61.02564105620751, 63.58974362031008, 62.564102594669045]\n","Accuracy: 61.487% (+/-1.459)\n"],"name":"stdout"}]},{"metadata":{"id":"GJXpRknvJ7zv","colab_type":"code","outputId":"eb7cecb8-cb38-47d2-a7f5-0477d17fd1fd","executionInfo":{"status":"ok","timestamp":1554254851835,"user_tz":-60,"elapsed":3963896,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 53.368\n",">#2: 50.259\n",">#3: 50.777\n",">#4: 49.223\n",">#5: 53.368\n",">#6: 47.150\n",">#7: 52.850\n",">#8: 48.705\n",">#9: 35.233\n",">#10: 50.777\n","[53.36787564766839, 50.259067357512954, 50.77720207253886, 49.22279792746114, 53.36787564766839, 47.15025906735752, 52.84974093264248, 48.704663212435236, 35.233160621761655, 50.77720207253886]\n","Accuracy: 49.171% (+/-5.037)\n"],"name":"stdout"}]},{"metadata":{"id":"BIjih8N5J9sc","colab_type":"code","outputId":"d3d3c5a2-1350-40ac-a7a0-ac64c28d7834","executionInfo":{"status":"ok","timestamp":1554256464745,"user_tz":-60,"elapsed":5576779,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[1,2,3])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 59.386\n",">#2: 60.751\n",">#3: 60.410\n",">#4: 59.044\n",">#5: 59.556\n",">#6: 57.679\n",">#7: 58.874\n",">#8: 60.410\n",">#9: 59.898\n",">#10: 55.119\n","[59.385665569696, 60.75085328300658, 60.40955635467894, 59.04436864136836, 59.55631403385983, 57.67918092805778, 58.87372014669021, 60.40955635467894, 59.89761096218748, 55.11945396560044]\n","Accuracy: 59.113% (+/-1.581)\n"],"name":"stdout"}]},{"metadata":{"id":"IzrIBY0VrK9M","colab_type":"code","outputId":"26ad61cd-f6b3-481d-ebc2-3976e3e62246","executionInfo":{"status":"ok","timestamp":1554257790110,"user_tz":-60,"elapsed":6902115,"user":{"displayName":"Danuphan Suwanwong","photoUrl":"","userId":"16514894279538784287"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"cell_type":"code","source":["# run the experiment\n","run_experiment(df_train_pcf, sessions=[1,2,3], subjects=[1,2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":[">#1: 65.903\n",">#2: 64.885\n",">#3: 62.850\n",">#4: 64.377\n",">#5: 63.868\n",">#6: 63.359\n",">#7: 63.613\n",">#8: 61.832\n",">#9: 64.885\n",">#10: 65.140\n","[65.90330791079057, 64.88549620595597, 62.84987277732854, 64.37659035353866, 63.86768448216314, 63.35877864870406, 63.61323157491271, 61.832061076285584, 64.88549620595597, 65.13994913216462]\n","Accuracy: 64.071% (+/-1.148)\n"],"name":"stdout"}]}]}